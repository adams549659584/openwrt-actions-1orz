name: Build-Lean-lede
on:
  # push:
  #   branches:
  #     - master
  #   paths:
  #     - '.github/workflows/Build-Lean-lede.yml'
  # schedule:
  #       - cron: 0 */6 * * *
  watch:
    types: started

env:
  TZ: Asia/Shanghai

jobs:
  x86:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:    
    - name: Prepare environment.
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        docker rmi `docker images -q`
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo df -h
        curl -fsSL https://raw.githubusercontent.com/adams549659584/openwrt-actions-1orz/master/.bashrc >> ~/.bashrc
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        
    - name: Clone source and install
      run: |
        git clone https://github.com/coolsnowwolf/lede
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Download and Load custom configuration
      run: |
        cd lede
        curl -fsSL https://raw.githubusercontent.com/adams549659584/openwrt-actions-1orz/master/lean-lede/x86_64/.config >.config
        bash <(curl -fsSL https://raw.githubusercontent.com/adams549659584/openwrt-actions-1orz/master/lean-lede/diy.sh)
        ./scripts/feeds install -a
        make defconfig
        
    - name: Download package
      run: |
        cd lede
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        sudo df -h
        
    - name: Multi-core compile
      run: |
        cd lede
        sudo df -h
        echo -e "$(($(nproc) + 1)) thread compile"
        
        make -j$(($(nproc) + 1))
        sudo df -h
        
    - name: Single-core compile
      if: failure()
      run: |
        sudo df -h
        cd lede
        make -j1 V=s
        sudo df -h
        
    - name: Upload entire bin directory
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: LEDE-x86_64-bin-dictionary
        path: lede/bin
        
    - name: Setup Upload Packages
      if: always()
      run: |
        cd lede/bin
        zip -r x86_64-Package.zip . -i *.ipk
    
    - name: Only Upload Packages
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: x86_64-Packages
        path: lede/bin/x86_64-Package.zip
        
    - name: Setup Upload dictionary
      if: always()
      run: |
        cd lede/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        
    - name: Only Upload firmware (Without packages)
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: x86_64
        path: ${{ env.FIRMWARE }}

    - name: Only Upload openwrt-x86-64-uefi-gpt-squashfs.img
      uses: actions/upload-artifact@master
      if: success()
      with:
        name: openwrt-x86-64-uefi-gpt-squashfs.img
        path: lede/bin/targets/openwrt-x86-64-uefi-gpt-squashfs.img.gz
        

  x86_pure:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:    
    - name: Initialization environment.
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/adams549659584/openwrt-actions-1orz/master/.bashrc >> ~/.bashrc
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        
    - name: Clone source and install
      run: |
        git clone https://github.com/coolsnowwolf/lede
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Download and Load custom configuration
      run: |
        cd lede
        curl -fsSL https://raw.githubusercontent.com/adams549659584/openwrt-actions-1orz/master/lean-lede/x86_64/pure/.config >.config
        bash <(curl -fsSL https://raw.githubusercontent.com/adams549659584/openwrt-actions-1orz/master/lean-lede/diy.sh)
        ./scripts/feeds install -a
        make defconfig
        
    - name: Download package
      run: |
        cd lede
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Multi-core compile
      run: |
        cd lede
        echo -e "$(($(nproc) + 1)) thread compile"
        sudo df -h
        make -j$(($(nproc) + 1))
        sudo df -h
        
    - name: Single-core compile
      if: failure()
      run: |
        sudo df -h
        cd lede
        make -j1 V=s
        sudo df -h
        
    - name: Upload entire bin directory
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: LEDE-x86_64_pure-bin-dictionary
        path: lede/bin
        
    - name: Setup Upload dictionary
      if: always()
      run: |
        cd lede/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        
    - name: Only Upload firmware (Without packages)
      uses: actions/upload-artifact@master
      if: success()
      with:
        name: x86_64_pure
        path: ${{ env.FIRMWARE }}       

    - name: Only Upload openwrt-x86-64-pure-uefi-gpt-squashfs.img
      uses: actions/upload-artifact@master
      if: success()
      with:
        name: openwrt-x86-64-pure-uefi-gpt-squashfs.img
        path: lede/bin/targets/openwrt-x86-64-uefi-gpt-squashfs.img.gz
        
  x86_original:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment.
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        sudo timedatectl set-timezone "$TZ"
        
    - name: Clone source and install
      run: |
        git clone https://github.com/openwrt/openwrt openwrt
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Custom configure file
      run: |
          [ -e files ] && mv files openwrt/files
          [ -e ./lean-lede/x86_64/original/.config ] && mv ./lean-lede/x86_64/original/.config openwrt/.config
          chmod +x ./lean-lede/diy.sh
          cd openwrt
          ../lean-lede/diy.sh

    - name: Make Defconfig
      run: |
          cd openwrt
          make defconfig
        
    - name: Download package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Multi-core compile
      run: |
        cd openwrt
        echo -e "$(($(nproc) + 1)) thread compile"
        sudo df -h
        make -j$(($(nproc) + 1))
        sudo df -h
        
    - name: Single-core compile
      if: failure()
      run: |
        sudo df -h
        cd openwrt
        make -j1 V=s
        sudo df -h
        
    - name: Upload entire bin directory
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: OpenWrt-x86_64_original-bin-dictionary
        path: openwrt/bin
        
    - name: Setup Upload dictionary
      if: always()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        
    - name: Only Upload firmware (Without packages)
      uses: actions/upload-artifact@master
      if: success()
      with:
        name: x86_64_original
        path: ${{ env.FIRMWARE }}